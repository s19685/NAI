MPP3

Specyfikacja programu "Jednowarstwowa sieć neuronowa":

Termin: dwa tygodnie

Dane wejściowe (należy samemu przygotować):

1. Stworzyć zadany katalog na dane.

2. W zadanym katalogu tworzymy kilka (K>=3) podkatalogów nazwanych nazwami języków (np. czeski, słowacki ...)

3. W każdym z nich umieszczamy po kilka tekstów trenujących sciągniętych np. z wikipedii w odpowiednich językach (w alfabetach łacińskich).

(Z praktyki wynika, ze wystarcza nawet mniej 10 tekstów uczących dla każdego języka, ale dlugosci chociaz ze 2 akapity) Oczywiście w momencie pisania programu nie powinno być wiadome ile i jakie będą języki.

4. W momencie uruchomienia sieć perceptronów będzie używała tych tekstów jako dane trenujące.

 

Opis programu:

Użyjemy 1-warstwowej sieci neuronowej do klasyfikowania języków naturalnych tekstów.

Bierzemy dokument w dowolnym języku (w alfabecie łacińskim) z pliku ".txt", wyrzucamy wszystkie znaki poza literami alfabetu angielskiego (ascii) i przerabiamy na 26-elementowy wektor proporcji liter (czyli: jaka jest proporcja 'a', 'b', etc.). Normalizacja atrybutów opcjonalna.

Okazuje sie, ze taki wektor rozkładu znaków wystarcza do rozróżniania języka naturalnego dokumentu tekstowego, nawet dla tak podobnych języków jak np. czeski i słowacki.

Tworzymy więc jedną warstwę K perceptronów (gdzie K to liczba języków) i uczymy każdego perceptrona rozpoznawania "jego" język.

Uczenie perceptronów przebiega jak w poprzednim projekcie, tzn z dyskretną (0-1) funkcją aktywacji.

Mając wyuczony każdy z perceptronów, klasyfikacji do jednej z K klas dokonujemy używając maximum selector.

Zapewnić okienko tekstowe do testowania: po nauczeniu wpiszemy lub wklejamy dowolny nowy tekst w danym języku i sprawdzamy, czy sieć prawidłowo go klasyfikuje.

Nie można używać żadnych bibliotek ML, wszystko ma być zaimplementowane od zera w pętlach, ifach, odleglość też sam ma liczyć używając dzialań arytmetycznych (do operacji na liczbach można używać java.lang.Math), etc. Można używać java.util.
